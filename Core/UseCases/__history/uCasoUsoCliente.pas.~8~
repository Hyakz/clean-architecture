unit uCasoUsoCliente;

interface

uses
  uiCasoUsoCliente, System.SysUtils, uClientes, uResponse, uDTOCliente, uEnumerador;

type
  TUCasoUsoCliente = class(TInterfacedObject, ICasoUsoCliente)
    function Cadastrar(Cliente: TCliente): TResponse;
    function Alterar(Cliente: TCliente): TResponse;
    function Deletar(ID: Integer): TResponse;
    function Consultar(Dto: DtoCliente): TResponse;
  end;

implementation

function TUCasoUsoCliente.Cadastrar(Cliente: TCliente): TResponse;
var
  Response: TResponse;
begin
  try
    Response.lSucesso  := True;
    Response.iCodErro  := 0;
    Response.cMensagem := RetornarMsgResponse.CadastradoComSucesso;
    Response.lstData   := nil;

  except
    on e: Exception do
    begin

    end;
  end;

  result := Response;
end;


function TUCasoUsoCliente.Alterar(Cliente: TCliente): TResponse;
var
  Response: TResponse;
begin
  try
    Cliente.ValidarRegrasNegocios;

    Response.lSucesso  := True;
    Response.iCodErro  := 0;
    Response.cMensagem := RetornarMsgResponse.AlteradoComSucesso;
    Response.lstData   := nil;

  except
    on e: Exception do
    begin

    end;
  end;

  result := Response;
end;

function TUCasoUsoCliente.Deletar(ID: Integer): TResponse;
var
  Response: TResponse;
begin
  try
    Response.lSucesso  := True;
    Response.iCodErro  := 0;
    Response.cMensagem := RetornarMsgResponse.Deletado;
    Response.lstData   := nil;

  except
    on e: Exception do
    begin

    end;
  end;

  result := Response;
end;


function TUCasoUsoCliente.Consultar(Dto: DtoCliente): TResponse;
var
  Response: TResponse;
begin
  try
    Response.lSucesso  := True;
    Response.iCodErro  := 0;
    Response.cMensagem := RetornarMsgResponse.ConsultaRealizada;
    Response.lstData   := nil;

  except
    on e: Exception do
    begin

    end;
  end;

  result := Response;
end;



end.
